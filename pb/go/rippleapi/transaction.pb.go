// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rippleapi/transaction.proto

package rippleapi

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnumTransactionType int32

const (
	TX_ACCOUNT_SET            EnumTransactionType = 0
	TX_ACCOUNT_DELETE         EnumTransactionType = 1
	TX_CHECK_CANCEL           EnumTransactionType = 2
	TX_CHECK_CASH             EnumTransactionType = 3
	TX_CHECK_CREATE           EnumTransactionType = 4
	TX_DEPOSIT_PREAUTH        EnumTransactionType = 5
	TX_ESCROW_CANCEL          EnumTransactionType = 6
	TX_ESCROW_CREATE          EnumTransactionType = 7
	TX_ESCROW_FINISH          EnumTransactionType = 8
	TX_OFFER_CANCEL           EnumTransactionType = 9
	TX_OFFER_CREATE           EnumTransactionType = 10
	TX_PAYMENT                EnumTransactionType = 11
	TX_PAYMENT_CHANNEL_CLAIM  EnumTransactionType = 12
	TX_PAYMENT_CHANNEL_CREATE EnumTransactionType = 13
	TX_PAYMENT_CHANNEL_FUND   EnumTransactionType = 14
	TX_SET_REGULAR_KEY        EnumTransactionType = 15
	TX_SINGER_LIST_SET        EnumTransactionType = 16
	TX_TRUST_SET              EnumTransactionType = 17
)

var EnumTransactionType_name = map[int32]string{
	0:  "TX_ACCOUNT_SET",
	1:  "TX_ACCOUNT_DELETE",
	2:  "TX_CHECK_CANCEL",
	3:  "TX_CHECK_CASH",
	4:  "TX_CHECK_CREATE",
	5:  "TX_DEPOSIT_PREAUTH",
	6:  "TX_ESCROW_CANCEL",
	7:  "TX_ESCROW_CREATE",
	8:  "TX_ESCROW_FINISH",
	9:  "TX_OFFER_CANCEL",
	10: "TX_OFFER_CREATE",
	11: "TX_PAYMENT",
	12: "TX_PAYMENT_CHANNEL_CLAIM",
	13: "TX_PAYMENT_CHANNEL_CREATE",
	14: "TX_PAYMENT_CHANNEL_FUND",
	15: "TX_SET_REGULAR_KEY",
	16: "TX_SINGER_LIST_SET",
	17: "TX_TRUST_SET",
}

var EnumTransactionType_value = map[string]int32{
	"TX_ACCOUNT_SET":            0,
	"TX_ACCOUNT_DELETE":         1,
	"TX_CHECK_CANCEL":           2,
	"TX_CHECK_CASH":             3,
	"TX_CHECK_CREATE":           4,
	"TX_DEPOSIT_PREAUTH":        5,
	"TX_ESCROW_CANCEL":          6,
	"TX_ESCROW_CREATE":          7,
	"TX_ESCROW_FINISH":          8,
	"TX_OFFER_CANCEL":           9,
	"TX_OFFER_CREATE":           10,
	"TX_PAYMENT":                11,
	"TX_PAYMENT_CHANNEL_CLAIM":  12,
	"TX_PAYMENT_CHANNEL_CREATE": 13,
	"TX_PAYMENT_CHANNEL_FUND":   14,
	"TX_SET_REGULAR_KEY":        15,
	"TX_SINGER_LIST_SET":        16,
	"TX_TRUST_SET":              17,
}

func (EnumTransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{0}
}

type Instructions struct {
	Fee                    string `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	MaxFee                 string `protobuf:"bytes,2,opt,name=maxFee,proto3" json:"maxFee,omitempty"`
	MaxLedgerVersion       uint64 `protobuf:"varint,3,opt,name=maxLedgerVersion,proto3" json:"maxLedgerVersion,omitempty"`
	MaxLedgerVersionOffset uint64 `protobuf:"varint,4,opt,name=maxLedgerVersionOffset,proto3" json:"maxLedgerVersionOffset,omitempty"`
	Sequence               uint64 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SignersCount           uint64 `protobuf:"varint,6,opt,name=signersCount,proto3" json:"signersCount,omitempty"`
}

func (m *Instructions) Reset()      { *m = Instructions{} }
func (*Instructions) ProtoMessage() {}
func (*Instructions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{0}
}
func (m *Instructions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instructions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instructions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Instructions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instructions.Merge(m, src)
}
func (m *Instructions) XXX_Size() int {
	return m.Size()
}
func (m *Instructions) XXX_DiscardUnknown() {
	xxx_messageInfo_Instructions.DiscardUnknown(m)
}

var xxx_messageInfo_Instructions proto.InternalMessageInfo

func (m *Instructions) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *Instructions) GetMaxFee() string {
	if m != nil {
		return m.MaxFee
	}
	return ""
}

func (m *Instructions) GetMaxLedgerVersion() uint64 {
	if m != nil {
		return m.MaxLedgerVersion
	}
	return 0
}

func (m *Instructions) GetMaxLedgerVersionOffset() uint64 {
	if m != nil {
		return m.MaxLedgerVersionOffset
	}
	return 0
}

func (m *Instructions) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Instructions) GetSignersCount() uint64 {
	if m != nil {
		return m.SignersCount
	}
	return 0
}

type RequestPrepareTransaction struct {
	TxType        EnumTransactionType `protobuf:"varint,1,opt,name=tx_type,json=txType,proto3,enum=rippleapi.transaction.EnumTransactionType" json:"tx_type,omitempty"`
	SenderAccount string              `protobuf:"bytes,2,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
	Amount        float64             `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	//float amount = 3;
	ReceiverAccount string        `protobuf:"bytes,4,opt,name=receiverAccount,proto3" json:"receiverAccount,omitempty"`
	Instructions    *Instructions `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
}

func (m *RequestPrepareTransaction) Reset()      { *m = RequestPrepareTransaction{} }
func (*RequestPrepareTransaction) ProtoMessage() {}
func (*RequestPrepareTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{1}
}
func (m *RequestPrepareTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPrepareTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPrepareTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPrepareTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPrepareTransaction.Merge(m, src)
}
func (m *RequestPrepareTransaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestPrepareTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPrepareTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPrepareTransaction proto.InternalMessageInfo

func (m *RequestPrepareTransaction) GetTxType() EnumTransactionType {
	if m != nil {
		return m.TxType
	}
	return TX_ACCOUNT_SET
}

func (m *RequestPrepareTransaction) GetSenderAccount() string {
	if m != nil {
		return m.SenderAccount
	}
	return ""
}

func (m *RequestPrepareTransaction) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RequestPrepareTransaction) GetReceiverAccount() string {
	if m != nil {
		return m.ReceiverAccount
	}
	return ""
}

func (m *RequestPrepareTransaction) GetInstructions() *Instructions {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type ResponsePrepareTransaction struct {
	TxJSON       string        `protobuf:"bytes,1,opt,name=txJSON,proto3" json:"txJSON,omitempty"`
	Instructions *Instructions `protobuf:"bytes,2,opt,name=instructions,proto3" json:"instructions,omitempty"`
}

func (m *ResponsePrepareTransaction) Reset()      { *m = ResponsePrepareTransaction{} }
func (*ResponsePrepareTransaction) ProtoMessage() {}
func (*ResponsePrepareTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{2}
}
func (m *ResponsePrepareTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponsePrepareTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponsePrepareTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponsePrepareTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponsePrepareTransaction.Merge(m, src)
}
func (m *ResponsePrepareTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ResponsePrepareTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponsePrepareTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ResponsePrepareTransaction proto.InternalMessageInfo

func (m *ResponsePrepareTransaction) GetTxJSON() string {
	if m != nil {
		return m.TxJSON
	}
	return ""
}

func (m *ResponsePrepareTransaction) GetInstructions() *Instructions {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type RequestSignTransaction struct {
	TxJSON string `protobuf:"bytes,1,opt,name=txJSON,proto3" json:"txJSON,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *RequestSignTransaction) Reset()      { *m = RequestSignTransaction{} }
func (*RequestSignTransaction) ProtoMessage() {}
func (*RequestSignTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{3}
}
func (m *RequestSignTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSignTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSignTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSignTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSignTransaction.Merge(m, src)
}
func (m *RequestSignTransaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestSignTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSignTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSignTransaction proto.InternalMessageInfo

func (m *RequestSignTransaction) GetTxJSON() string {
	if m != nil {
		return m.TxJSON
	}
	return ""
}

func (m *RequestSignTransaction) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type ResponseSignTransaction struct {
	TxID   string `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	TxBlob string `protobuf:"bytes,2,opt,name=txBlob,proto3" json:"txBlob,omitempty"`
}

func (m *ResponseSignTransaction) Reset()      { *m = ResponseSignTransaction{} }
func (*ResponseSignTransaction) ProtoMessage() {}
func (*ResponseSignTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{4}
}
func (m *ResponseSignTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSignTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSignTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSignTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSignTransaction.Merge(m, src)
}
func (m *ResponseSignTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSignTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSignTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSignTransaction proto.InternalMessageInfo

func (m *ResponseSignTransaction) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *ResponseSignTransaction) GetTxBlob() string {
	if m != nil {
		return m.TxBlob
	}
	return ""
}

type RequestSubmitTransaction struct {
	TxBlob string `protobuf:"bytes,1,opt,name=txBlob,proto3" json:"txBlob,omitempty"`
}

func (m *RequestSubmitTransaction) Reset()      { *m = RequestSubmitTransaction{} }
func (*RequestSubmitTransaction) ProtoMessage() {}
func (*RequestSubmitTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{5}
}
func (m *RequestSubmitTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSubmitTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSubmitTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSubmitTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubmitTransaction.Merge(m, src)
}
func (m *RequestSubmitTransaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestSubmitTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubmitTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubmitTransaction proto.InternalMessageInfo

func (m *RequestSubmitTransaction) GetTxBlob() string {
	if m != nil {
		return m.TxBlob
	}
	return ""
}

type ResponseSubmitTransaction struct {
	ResultJSONString      string `protobuf:"bytes,1,opt,name=resultJSONString,proto3" json:"resultJSONString,omitempty"`
	EarliestLedgerVersion uint64 `protobuf:"varint,2,opt,name=earliestLedgerVersion,proto3" json:"earliestLedgerVersion,omitempty"`
}

func (m *ResponseSubmitTransaction) Reset()      { *m = ResponseSubmitTransaction{} }
func (*ResponseSubmitTransaction) ProtoMessage() {}
func (*ResponseSubmitTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{6}
}
func (m *ResponseSubmitTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSubmitTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSubmitTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSubmitTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSubmitTransaction.Merge(m, src)
}
func (m *ResponseSubmitTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSubmitTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSubmitTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSubmitTransaction proto.InternalMessageInfo

func (m *ResponseSubmitTransaction) GetResultJSONString() string {
	if m != nil {
		return m.ResultJSONString
	}
	return ""
}

func (m *ResponseSubmitTransaction) GetEarliestLedgerVersion() uint64 {
	if m != nil {
		return m.EarliestLedgerVersion
	}
	return 0
}

type ResponseWaitValidation struct {
	LedgerVersion uint64 `protobuf:"varint,1,opt,name=ledgerVersion,proto3" json:"ledgerVersion,omitempty"`
}

func (m *ResponseWaitValidation) Reset()      { *m = ResponseWaitValidation{} }
func (*ResponseWaitValidation) ProtoMessage() {}
func (*ResponseWaitValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{7}
}
func (m *ResponseWaitValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseWaitValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseWaitValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseWaitValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseWaitValidation.Merge(m, src)
}
func (m *ResponseWaitValidation) XXX_Size() int {
	return m.Size()
}
func (m *ResponseWaitValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseWaitValidation.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseWaitValidation proto.InternalMessageInfo

func (m *ResponseWaitValidation) GetLedgerVersion() uint64 {
	if m != nil {
		return m.LedgerVersion
	}
	return 0
}

type RequestGetTransaction struct {
	TxID             string `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	MinLedgerVersion uint64 `protobuf:"varint,2,opt,name=minLedgerVersion,proto3" json:"minLedgerVersion,omitempty"`
}

func (m *RequestGetTransaction) Reset()      { *m = RequestGetTransaction{} }
func (*RequestGetTransaction) ProtoMessage() {}
func (*RequestGetTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{8}
}
func (m *RequestGetTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetTransaction.Merge(m, src)
}
func (m *RequestGetTransaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetTransaction proto.InternalMessageInfo

func (m *RequestGetTransaction) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *RequestGetTransaction) GetMinLedgerVersion() uint64 {
	if m != nil {
		return m.MinLedgerVersion
	}
	return 0
}

type ResponseGetTransaction struct {
	ResultJSONString string `protobuf:"bytes,1,opt,name=resultJSONString,proto3" json:"resultJSONString,omitempty"`
	ErrorMessage     string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (m *ResponseGetTransaction) Reset()      { *m = ResponseGetTransaction{} }
func (*ResponseGetTransaction) ProtoMessage() {}
func (*ResponseGetTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f692921b4448d7b, []int{9}
}
func (m *ResponseGetTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetTransaction.Merge(m, src)
}
func (m *ResponseGetTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetTransaction proto.InternalMessageInfo

func (m *ResponseGetTransaction) GetResultJSONString() string {
	if m != nil {
		return m.ResultJSONString
	}
	return ""
}

func (m *ResponseGetTransaction) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("rippleapi.transaction.EnumTransactionType", EnumTransactionType_name, EnumTransactionType_value)
	proto.RegisterType((*Instructions)(nil), "rippleapi.transaction.Instructions")
	proto.RegisterType((*RequestPrepareTransaction)(nil), "rippleapi.transaction.RequestPrepareTransaction")
	proto.RegisterType((*ResponsePrepareTransaction)(nil), "rippleapi.transaction.ResponsePrepareTransaction")
	proto.RegisterType((*RequestSignTransaction)(nil), "rippleapi.transaction.RequestSignTransaction")
	proto.RegisterType((*ResponseSignTransaction)(nil), "rippleapi.transaction.ResponseSignTransaction")
	proto.RegisterType((*RequestSubmitTransaction)(nil), "rippleapi.transaction.RequestSubmitTransaction")
	proto.RegisterType((*ResponseSubmitTransaction)(nil), "rippleapi.transaction.ResponseSubmitTransaction")
	proto.RegisterType((*ResponseWaitValidation)(nil), "rippleapi.transaction.ResponseWaitValidation")
	proto.RegisterType((*RequestGetTransaction)(nil), "rippleapi.transaction.RequestGetTransaction")
	proto.RegisterType((*ResponseGetTransaction)(nil), "rippleapi.transaction.ResponseGetTransaction")
}

func init() { proto.RegisterFile("rippleapi/transaction.proto", fileDescriptor_5f692921b4448d7b) }

var fileDescriptor_5f692921b4448d7b = []byte{
	// 977 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x73, 0xda, 0x46,
	0x14, 0x97, 0x30, 0x21, 0xf1, 0x0b, 0xc6, 0xf2, 0x26, 0x26, 0x04, 0xb7, 0x6a, 0x46, 0xcd, 0xc1,
	0xe3, 0xa9, 0x65, 0xd7, 0xed, 0xf4, 0xd8, 0x19, 0x59, 0x5e, 0x0c, 0x0d, 0x06, 0x46, 0x12, 0x31,
	0x69, 0x0f, 0x1a, 0x81, 0xd7, 0x58, 0x33, 0x20, 0xd1, 0xd5, 0x92, 0xc1, 0xd3, 0xc9, 0x4c, 0x3f,
	0x42, 0xfb, 0x2d, 0x7a, 0xe9, 0xf7, 0xe8, 0xad, 0x3e, 0xe6, 0xd0, 0x43, 0x8d, 0x2f, 0x3d, 0xe6,
	0x23, 0x74, 0xf4, 0x07, 0x1b, 0x09, 0x30, 0x6d, 0x4e, 0xb0, 0xbf, 0xf7, 0x7e, 0xef, 0xf7, 0xf6,
	0xb7, 0xbb, 0x6f, 0x04, 0x5b, 0xd4, 0x1e, 0x0c, 0x7a, 0xc4, 0x1a, 0xd8, 0x7b, 0x8c, 0x5a, 0x8e,
	0x67, 0x75, 0x98, 0xed, 0x3a, 0xf2, 0x80, 0xba, 0xcc, 0x45, 0x9b, 0xb7, 0x41, 0x79, 0x2a, 0x58,
	0xdc, 0xea, 0xba, 0x6e, 0xb7, 0x47, 0xf6, 0x82, 0xa4, 0xf6, 0xf0, 0x7c, 0x8f, 0xf4, 0x07, 0xec,
	0x32, 0xe4, 0x48, 0x7f, 0xf1, 0x90, 0xad, 0x38, 0x1e, 0xa3, 0xc3, 0x20, 0xd9, 0x43, 0x02, 0xac,
	0x9c, 0x13, 0x52, 0xe0, 0x5f, 0xf0, 0xdb, 0xab, 0x9a, 0xff, 0x17, 0xe5, 0x21, 0xd3, 0xb7, 0x46,
	0x25, 0x42, 0x0a, 0xa9, 0x00, 0x8c, 0x56, 0x68, 0x07, 0x84, 0xbe, 0x35, 0xaa, 0x92, 0xb3, 0x2e,
	0xa1, 0xaf, 0x09, 0xf5, 0x6c, 0xd7, 0x29, 0xac, 0xbc, 0xe0, 0xb7, 0xd3, 0xda, 0x0c, 0x8e, 0xbe,
	0x81, 0x7c, 0x12, 0xab, 0x9f, 0x9f, 0x7b, 0x84, 0x15, 0xd2, 0x01, 0x63, 0x41, 0x14, 0x15, 0xe1,
	0x91, 0x47, 0x7e, 0x1c, 0x12, 0xa7, 0x43, 0x0a, 0x0f, 0x82, 0xcc, 0xdb, 0x35, 0x92, 0x20, 0xeb,
	0xd9, 0x5d, 0x87, 0x50, 0x4f, 0x75, 0x87, 0x0e, 0x2b, 0x64, 0x82, 0x78, 0x0c, 0x93, 0x7e, 0x4d,
	0xc1, 0x73, 0xcd, 0x27, 0x78, 0xac, 0x41, 0xc9, 0xc0, 0xa2, 0xc4, 0xb8, 0x73, 0x06, 0xa9, 0xf0,
	0x90, 0x8d, 0x4c, 0x76, 0x39, 0x08, 0xf7, 0x9b, 0x3b, 0xd8, 0x91, 0xe7, 0x5a, 0x28, 0x63, 0x67,
	0xd8, 0x9f, 0x22, 0x1a, 0x97, 0x03, 0xa2, 0x65, 0xd8, 0xc8, 0xff, 0x45, 0x2f, 0x61, 0xcd, 0x23,
	0xce, 0x19, 0xa1, 0x4a, 0xa7, 0x13, 0xf4, 0x11, 0xba, 0x14, 0x07, 0x7d, 0x13, 0xad, 0x7e, 0x10,
	0xf6, 0x2d, 0xe2, 0xb5, 0x68, 0x85, 0xb6, 0x61, 0x9d, 0x92, 0x0e, 0xb1, 0xdf, 0xde, 0xf1, 0xd3,
	0x01, 0x3f, 0x09, 0xa3, 0x63, 0xc8, 0xda, 0x53, 0x07, 0x15, 0xd8, 0xf1, 0xf8, 0xe0, 0xf3, 0x05,
	0x1d, 0x4f, 0x9f, 0xa9, 0x16, 0x23, 0x4a, 0xef, 0xa0, 0xa8, 0x11, 0x6f, 0xe0, 0x3a, 0x1e, 0x99,
	0xe3, 0x49, 0x1e, 0x32, 0x6c, 0xf4, 0x9d, 0x5e, 0xaf, 0x45, 0x57, 0x20, 0x5a, 0xcd, 0xc8, 0xa7,
	0x3e, 0x56, 0xbe, 0x0c, 0xf9, 0xe8, 0x44, 0x74, 0xbb, 0xeb, 0xfc, 0x17, 0xe9, 0x3c, 0x64, 0x3c,
	0xd2, 0xa1, 0x64, 0x62, 0x6d, 0xb4, 0x92, 0x30, 0x3c, 0x9b, 0x6c, 0x24, 0x59, 0x0a, 0x41, 0x9a,
	0x8d, 0x2a, 0x47, 0x51, 0xa1, 0xe0, 0x7f, 0x58, 0xfe, 0xb0, 0xe7, 0xb6, 0x27, 0x65, 0xc2, 0x95,
	0x74, 0x00, 0x85, 0x49, 0x43, 0xc3, 0x76, 0xdf, 0x66, 0x33, 0x2d, 0x05, 0x1c, 0x3e, 0xc6, 0x79,
	0xe7, 0x5f, 0xab, 0x48, 0x7a, 0x86, 0xb4, 0x03, 0x02, 0x25, 0xde, 0xb0, 0xc7, 0xfc, 0xee, 0x75,
	0x46, 0x6d, 0xa7, 0x1b, 0xd1, 0x67, 0x70, 0xf4, 0x35, 0x6c, 0x12, 0x8b, 0xf6, 0x6c, 0xe2, 0xb1,
	0xf8, 0x4b, 0x4a, 0x05, 0xb7, 0x79, 0x7e, 0x50, 0xfa, 0xd6, 0xf7, 0x30, 0x94, 0x3f, 0xb5, 0x6c,
	0xf6, 0xda, 0xea, 0xd9, 0x67, 0x56, 0xa0, 0xfd, 0x12, 0xd6, 0x7a, 0xb1, 0x3a, 0x7c, 0x50, 0x27,
	0x0e, 0x4a, 0xa7, 0xb0, 0x19, 0x6d, 0xf9, 0x98, 0xb0, 0x65, 0xbe, 0xf9, 0xef, 0xdc, 0x76, 0xe6,
	0x75, 0x37, 0x83, 0x4b, 0x17, 0x77, 0x8d, 0x25, 0x2a, 0xff, 0x1f, 0x53, 0x24, 0xc8, 0x12, 0x4a,
	0x5d, 0x7a, 0x42, 0x3c, 0xcf, 0xea, 0x4e, 0xe6, 0x4e, 0x0c, 0xdb, 0xf9, 0x7d, 0x05, 0x9e, 0xcc,
	0x79, 0x96, 0x08, 0x41, 0xce, 0x68, 0x99, 0x8a, 0xaa, 0xd6, 0x9b, 0x35, 0xc3, 0xd4, 0xb1, 0x21,
	0x70, 0x68, 0x13, 0x36, 0xa6, 0xb0, 0x23, 0x5c, 0xc5, 0x06, 0x16, 0x78, 0xf4, 0x04, 0xd6, 0x8d,
	0x96, 0xa9, 0x96, 0xb1, 0xfa, 0xca, 0x54, 0x95, 0x9a, 0x8a, 0xab, 0x42, 0x0a, 0x6d, 0xc0, 0xda,
	0x14, 0xa8, 0x97, 0x85, 0x95, 0x78, 0x9e, 0x86, 0x15, 0x03, 0x0b, 0x69, 0x94, 0x07, 0x64, 0xb4,
	0xcc, 0x23, 0xdc, 0xa8, 0xeb, 0x15, 0xc3, 0x6c, 0x68, 0x58, 0x69, 0x1a, 0x65, 0xe1, 0x01, 0x7a,
	0x0a, 0x82, 0xd1, 0x32, 0xb1, 0xae, 0x6a, 0xf5, 0xd3, 0x49, 0xd5, 0x4c, 0x02, 0x0d, 0x6b, 0x3c,
	0x8c, 0xa3, 0xa5, 0x4a, 0xad, 0xa2, 0x97, 0x85, 0x47, 0x91, 0x5c, 0xbd, 0x54, 0xc2, 0xda, 0xa4,
	0xc0, 0x6a, 0x1c, 0x0c, 0xf9, 0x80, 0x72, 0x00, 0x46, 0xcb, 0x6c, 0x28, 0x6f, 0x4e, 0x70, 0xcd,
	0x10, 0x1e, 0xa3, 0x4f, 0xa0, 0x70, 0xb7, 0x36, 0xd5, 0xb2, 0x52, 0xab, 0xe1, 0xaa, 0xa9, 0x56,
	0x95, 0xca, 0x89, 0x90, 0x45, 0x9f, 0xc2, 0xf3, 0x79, 0xd1, 0xb0, 0xd8, 0x1a, 0xda, 0x82, 0x67,
	0x73, 0xc2, 0xa5, 0x66, 0xed, 0x48, 0xc8, 0x45, 0xbb, 0xd5, 0xb1, 0x61, 0x6a, 0xf8, 0xb8, 0x59,
	0x55, 0x34, 0xf3, 0x15, 0x7e, 0x23, 0xac, 0x4f, 0xf0, 0x4a, 0xed, 0x18, 0x6b, 0x66, 0xb5, 0xa2,
	0x87, 0x8e, 0x0b, 0x48, 0x80, 0xac, 0xd1, 0x32, 0x0d, 0xad, 0x19, 0x21, 0x1b, 0x07, 0x7f, 0xa6,
	0xe1, 0xa9, 0x16, 0xcc, 0x8a, 0xa9, 0x13, 0x53, 0x1a, 0x15, 0xf4, 0x13, 0xa0, 0x39, 0x63, 0x68,
	0x7f, 0xc1, 0x60, 0x59, 0x38, 0xcc, 0x8b, 0x5f, 0x2e, 0x64, 0x2c, 0x9a, 0x75, 0x12, 0x87, 0x28,
	0xac, 0x27, 0x47, 0xc7, 0xee, 0xfd, 0xca, 0x89, 0xf4, 0xa2, 0xbc, 0x44, 0x36, 0x91, 0x2f, 0x71,
	0x68, 0x04, 0x1b, 0xb3, 0x33, 0x63, 0x6f, 0x89, 0x6a, 0x92, 0x50, 0xdc, 0x5f, 0xa6, 0x9b, 0x64,
	0x48, 0x1c, 0xfa, 0x01, 0x72, 0x89, 0x71, 0x91, 0x97, 0xc3, 0x8f, 0x03, 0x79, 0xf2, 0x71, 0x20,
	0x63, 0xff, 0xe3, 0xa0, 0xb8, 0xbb, 0xa4, 0x7a, 0xbc, 0x8c, 0xc4, 0xed, 0xf3, 0xc8, 0x85, 0x5c,
	0xe2, 0xc9, 0x7f, 0x71, 0xff, 0x9e, 0xe2, 0xd9, 0x4b, 0x25, 0xe3, 0xe9, 0x12, 0x77, 0xf8, 0xf6,
	0xea, 0x5a, 0xe4, 0xde, 0x5f, 0x8b, 0xdc, 0x87, 0x6b, 0x91, 0xff, 0x79, 0x2c, 0xf2, 0xbf, 0x8d,
	0x45, 0xfe, 0x8f, 0xb1, 0xc8, 0x5f, 0x8d, 0x45, 0xfe, 0xef, 0xb1, 0xc8, 0xff, 0x33, 0x16, 0xb9,
	0x0f, 0x63, 0x91, 0xff, 0xe5, 0x46, 0xe4, 0xae, 0x6e, 0x44, 0xee, 0xfd, 0x8d, 0xc8, 0xc1, 0x67,
	0x1d, 0xb7, 0x2f, 0x77, 0x6d, 0x76, 0x31, 0x6c, 0xcb, 0x17, 0x36, 0x75, 0xfb, 0x96, 0xdd, 0xbb,
	0x8c, 0xa4, 0x77, 0x7b, 0x76, 0xfb, 0x70, 0xee, 0x2d, 0xfd, 0x7e, 0xf5, 0xb6, 0xb9, 0x76, 0x26,
	0xf0, 0xea, 0xab, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xed, 0x88, 0x93, 0xfd, 0x8c, 0x09, 0x00,
	0x00,
}

func (x EnumTransactionType) String() string {
	s, ok := EnumTransactionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Instructions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Instructions)
	if !ok {
		that2, ok := that.(Instructions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if this.MaxFee != that1.MaxFee {
		return false
	}
	if this.MaxLedgerVersion != that1.MaxLedgerVersion {
		return false
	}
	if this.MaxLedgerVersionOffset != that1.MaxLedgerVersionOffset {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if this.SignersCount != that1.SignersCount {
		return false
	}
	return true
}
func (this *RequestPrepareTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPrepareTransaction)
	if !ok {
		that2, ok := that.(RequestPrepareTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxType != that1.TxType {
		return false
	}
	if this.SenderAccount != that1.SenderAccount {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.ReceiverAccount != that1.ReceiverAccount {
		return false
	}
	if !this.Instructions.Equal(that1.Instructions) {
		return false
	}
	return true
}
func (this *ResponsePrepareTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponsePrepareTransaction)
	if !ok {
		that2, ok := that.(ResponsePrepareTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxJSON != that1.TxJSON {
		return false
	}
	if !this.Instructions.Equal(that1.Instructions) {
		return false
	}
	return true
}
func (this *RequestSignTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSignTransaction)
	if !ok {
		that2, ok := that.(RequestSignTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxJSON != that1.TxJSON {
		return false
	}
	if this.Secret != that1.Secret {
		return false
	}
	return true
}
func (this *ResponseSignTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSignTransaction)
	if !ok {
		that2, ok := that.(ResponseSignTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxID != that1.TxID {
		return false
	}
	if this.TxBlob != that1.TxBlob {
		return false
	}
	return true
}
func (this *RequestSubmitTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSubmitTransaction)
	if !ok {
		that2, ok := that.(RequestSubmitTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxBlob != that1.TxBlob {
		return false
	}
	return true
}
func (this *ResponseSubmitTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSubmitTransaction)
	if !ok {
		that2, ok := that.(ResponseSubmitTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultJSONString != that1.ResultJSONString {
		return false
	}
	if this.EarliestLedgerVersion != that1.EarliestLedgerVersion {
		return false
	}
	return true
}
func (this *ResponseWaitValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseWaitValidation)
	if !ok {
		that2, ok := that.(ResponseWaitValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LedgerVersion != that1.LedgerVersion {
		return false
	}
	return true
}
func (this *RequestGetTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetTransaction)
	if !ok {
		that2, ok := that.(RequestGetTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxID != that1.TxID {
		return false
	}
	if this.MinLedgerVersion != that1.MinLedgerVersion {
		return false
	}
	return true
}
func (this *ResponseGetTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetTransaction)
	if !ok {
		that2, ok := that.(ResponseGetTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultJSONString != that1.ResultJSONString {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *Instructions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rippleapi.Instructions{")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "MaxFee: "+fmt.Sprintf("%#v", this.MaxFee)+",\n")
	s = append(s, "MaxLedgerVersion: "+fmt.Sprintf("%#v", this.MaxLedgerVersion)+",\n")
	s = append(s, "MaxLedgerVersionOffset: "+fmt.Sprintf("%#v", this.MaxLedgerVersionOffset)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	s = append(s, "SignersCount: "+fmt.Sprintf("%#v", this.SignersCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPrepareTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rippleapi.RequestPrepareTransaction{")
	s = append(s, "TxType: "+fmt.Sprintf("%#v", this.TxType)+",\n")
	s = append(s, "SenderAccount: "+fmt.Sprintf("%#v", this.SenderAccount)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "ReceiverAccount: "+fmt.Sprintf("%#v", this.ReceiverAccount)+",\n")
	if this.Instructions != nil {
		s = append(s, "Instructions: "+fmt.Sprintf("%#v", this.Instructions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponsePrepareTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rippleapi.ResponsePrepareTransaction{")
	s = append(s, "TxJSON: "+fmt.Sprintf("%#v", this.TxJSON)+",\n")
	if this.Instructions != nil {
		s = append(s, "Instructions: "+fmt.Sprintf("%#v", this.Instructions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rippleapi.RequestSignTransaction{")
	s = append(s, "TxJSON: "+fmt.Sprintf("%#v", this.TxJSON)+",\n")
	s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSignTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rippleapi.ResponseSignTransaction{")
	s = append(s, "TxID: "+fmt.Sprintf("%#v", this.TxID)+",\n")
	s = append(s, "TxBlob: "+fmt.Sprintf("%#v", this.TxBlob)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubmitTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rippleapi.RequestSubmitTransaction{")
	s = append(s, "TxBlob: "+fmt.Sprintf("%#v", this.TxBlob)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSubmitTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rippleapi.ResponseSubmitTransaction{")
	s = append(s, "ResultJSONString: "+fmt.Sprintf("%#v", this.ResultJSONString)+",\n")
	s = append(s, "EarliestLedgerVersion: "+fmt.Sprintf("%#v", this.EarliestLedgerVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseWaitValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rippleapi.ResponseWaitValidation{")
	s = append(s, "LedgerVersion: "+fmt.Sprintf("%#v", this.LedgerVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rippleapi.RequestGetTransaction{")
	s = append(s, "TxID: "+fmt.Sprintf("%#v", this.TxID)+",\n")
	s = append(s, "MinLedgerVersion: "+fmt.Sprintf("%#v", this.MinLedgerVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rippleapi.ResponseGetTransaction{")
	s = append(s, "ResultJSONString: "+fmt.Sprintf("%#v", this.ResultJSONString)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransaction(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RippleTransactionAPIClient is the client API for RippleTransactionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RippleTransactionAPIClient interface {
	// https://xrpl.org/rippleapi-reference.html#preparetransaction
	PrepareTransaction(ctx context.Context, in *RequestPrepareTransaction, opts ...grpc.CallOption) (*ResponsePrepareTransaction, error)
	SignTransaction(ctx context.Context, in *RequestSignTransaction, opts ...grpc.CallOption) (*ResponseSignTransaction, error)
	SubmitTransaction(ctx context.Context, in *RequestSubmitTransaction, opts ...grpc.CallOption) (*ResponseSubmitTransaction, error)
	WaitValidation(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (RippleTransactionAPI_WaitValidationClient, error)
	GetTransaction(ctx context.Context, in *RequestGetTransaction, opts ...grpc.CallOption) (*ResponseGetTransaction, error)
}

type rippleTransactionAPIClient struct {
	cc *grpc.ClientConn
}

func NewRippleTransactionAPIClient(cc *grpc.ClientConn) RippleTransactionAPIClient {
	return &rippleTransactionAPIClient{cc}
}

func (c *rippleTransactionAPIClient) PrepareTransaction(ctx context.Context, in *RequestPrepareTransaction, opts ...grpc.CallOption) (*ResponsePrepareTransaction, error) {
	out := new(ResponsePrepareTransaction)
	err := c.cc.Invoke(ctx, "/rippleapi.transaction.RippleTransactionAPI/PrepareTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rippleTransactionAPIClient) SignTransaction(ctx context.Context, in *RequestSignTransaction, opts ...grpc.CallOption) (*ResponseSignTransaction, error) {
	out := new(ResponseSignTransaction)
	err := c.cc.Invoke(ctx, "/rippleapi.transaction.RippleTransactionAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rippleTransactionAPIClient) SubmitTransaction(ctx context.Context, in *RequestSubmitTransaction, opts ...grpc.CallOption) (*ResponseSubmitTransaction, error) {
	out := new(ResponseSubmitTransaction)
	err := c.cc.Invoke(ctx, "/rippleapi.transaction.RippleTransactionAPI/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rippleTransactionAPIClient) WaitValidation(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (RippleTransactionAPI_WaitValidationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RippleTransactionAPI_serviceDesc.Streams[0], "/rippleapi.transaction.RippleTransactionAPI/WaitValidation", opts...)
	if err != nil {
		return nil, err
	}
	x := &rippleTransactionAPIWaitValidationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RippleTransactionAPI_WaitValidationClient interface {
	Recv() (*ResponseWaitValidation, error)
	grpc.ClientStream
}

type rippleTransactionAPIWaitValidationClient struct {
	grpc.ClientStream
}

func (x *rippleTransactionAPIWaitValidationClient) Recv() (*ResponseWaitValidation, error) {
	m := new(ResponseWaitValidation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rippleTransactionAPIClient) GetTransaction(ctx context.Context, in *RequestGetTransaction, opts ...grpc.CallOption) (*ResponseGetTransaction, error) {
	out := new(ResponseGetTransaction)
	err := c.cc.Invoke(ctx, "/rippleapi.transaction.RippleTransactionAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RippleTransactionAPIServer is the server API for RippleTransactionAPI service.
type RippleTransactionAPIServer interface {
	// https://xrpl.org/rippleapi-reference.html#preparetransaction
	PrepareTransaction(context.Context, *RequestPrepareTransaction) (*ResponsePrepareTransaction, error)
	SignTransaction(context.Context, *RequestSignTransaction) (*ResponseSignTransaction, error)
	SubmitTransaction(context.Context, *RequestSubmitTransaction) (*ResponseSubmitTransaction, error)
	WaitValidation(*types.Empty, RippleTransactionAPI_WaitValidationServer) error
	GetTransaction(context.Context, *RequestGetTransaction) (*ResponseGetTransaction, error)
}

// UnimplementedRippleTransactionAPIServer can be embedded to have forward compatible implementations.
type UnimplementedRippleTransactionAPIServer struct {
}

func (*UnimplementedRippleTransactionAPIServer) PrepareTransaction(ctx context.Context, req *RequestPrepareTransaction) (*ResponsePrepareTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTransaction not implemented")
}
func (*UnimplementedRippleTransactionAPIServer) SignTransaction(ctx context.Context, req *RequestSignTransaction) (*ResponseSignTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (*UnimplementedRippleTransactionAPIServer) SubmitTransaction(ctx context.Context, req *RequestSubmitTransaction) (*ResponseSubmitTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedRippleTransactionAPIServer) WaitValidation(req *types.Empty, srv RippleTransactionAPI_WaitValidationServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitValidation not implemented")
}
func (*UnimplementedRippleTransactionAPIServer) GetTransaction(ctx context.Context, req *RequestGetTransaction) (*ResponseGetTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}

func RegisterRippleTransactionAPIServer(s *grpc.Server, srv RippleTransactionAPIServer) {
	s.RegisterService(&_RippleTransactionAPI_serviceDesc, srv)
}

func _RippleTransactionAPI_PrepareTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPrepareTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleTransactionAPIServer).PrepareTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.transaction.RippleTransactionAPI/PrepareTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleTransactionAPIServer).PrepareTransaction(ctx, req.(*RequestPrepareTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RippleTransactionAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleTransactionAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.transaction.RippleTransactionAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleTransactionAPIServer).SignTransaction(ctx, req.(*RequestSignTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RippleTransactionAPI_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubmitTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleTransactionAPIServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.transaction.RippleTransactionAPI/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleTransactionAPIServer).SubmitTransaction(ctx, req.(*RequestSubmitTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RippleTransactionAPI_WaitValidation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RippleTransactionAPIServer).WaitValidation(m, &rippleTransactionAPIWaitValidationServer{stream})
}

type RippleTransactionAPI_WaitValidationServer interface {
	Send(*ResponseWaitValidation) error
	grpc.ServerStream
}

type rippleTransactionAPIWaitValidationServer struct {
	grpc.ServerStream
}

func (x *rippleTransactionAPIWaitValidationServer) Send(m *ResponseWaitValidation) error {
	return x.ServerStream.SendMsg(m)
}

func _RippleTransactionAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RippleTransactionAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rippleapi.transaction.RippleTransactionAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RippleTransactionAPIServer).GetTransaction(ctx, req.(*RequestGetTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _RippleTransactionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rippleapi.transaction.RippleTransactionAPI",
	HandlerType: (*RippleTransactionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareTransaction",
			Handler:    _RippleTransactionAPI_PrepareTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _RippleTransactionAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _RippleTransactionAPI_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _RippleTransactionAPI_GetTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitValidation",
			Handler:       _RippleTransactionAPI_WaitValidation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rippleapi/transaction.proto",
}

func (m *Instructions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instructions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instructions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignersCount != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.SignersCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Sequence != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxLedgerVersionOffset != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.MaxLedgerVersionOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxLedgerVersion != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.MaxLedgerVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MaxFee) > 0 {
		i -= len(m.MaxFee)
		copy(dAtA[i:], m.MaxFee)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.MaxFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPrepareTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPrepareTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPrepareTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Instructions != nil {
		{
			size, err := m.Instructions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReceiverAccount) > 0 {
		i -= len(m.ReceiverAccount)
		copy(dAtA[i:], m.ReceiverAccount)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ReceiverAccount)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.SenderAccount) > 0 {
		i -= len(m.SenderAccount)
		copy(dAtA[i:], m.SenderAccount)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.SenderAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxType != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponsePrepareTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponsePrepareTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponsePrepareTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Instructions != nil {
		{
			size, err := m.Instructions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxJSON) > 0 {
		i -= len(m.TxJSON)
		copy(dAtA[i:], m.TxJSON)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxJSON)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSignTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSignTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxJSON) > 0 {
		i -= len(m.TxJSON)
		copy(dAtA[i:], m.TxJSON)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxJSON)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSignTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSignTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSignTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxBlob) > 0 {
		i -= len(m.TxBlob)
		copy(dAtA[i:], m.TxBlob)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxBlob)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSubmitTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubmitTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSubmitTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxBlob) > 0 {
		i -= len(m.TxBlob)
		copy(dAtA[i:], m.TxBlob)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxBlob)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSubmitTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSubmitTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSubmitTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EarliestLedgerVersion != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.EarliestLedgerVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ResultJSONString) > 0 {
		i -= len(m.ResultJSONString)
		copy(dAtA[i:], m.ResultJSONString)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ResultJSONString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseWaitValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseWaitValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseWaitValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LedgerVersion != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.LedgerVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinLedgerVersion != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.MinLedgerVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResultJSONString) > 0 {
		i -= len(m.ResultJSONString)
		copy(dAtA[i:], m.ResultJSONString)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ResultJSONString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Instructions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.MaxFee)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.MaxLedgerVersion != 0 {
		n += 1 + sovTransaction(uint64(m.MaxLedgerVersion))
	}
	if m.MaxLedgerVersionOffset != 0 {
		n += 1 + sovTransaction(uint64(m.MaxLedgerVersionOffset))
	}
	if m.Sequence != 0 {
		n += 1 + sovTransaction(uint64(m.Sequence))
	}
	if m.SignersCount != 0 {
		n += 1 + sovTransaction(uint64(m.SignersCount))
	}
	return n
}

func (m *RequestPrepareTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxType != 0 {
		n += 1 + sovTransaction(uint64(m.TxType))
	}
	l = len(m.SenderAccount)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	l = len(m.ReceiverAccount)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Instructions != nil {
		l = m.Instructions.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *ResponsePrepareTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxJSON)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Instructions != nil {
		l = m.Instructions.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *RequestSignTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxJSON)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *ResponseSignTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.TxBlob)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *RequestSubmitTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxBlob)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *ResponseSubmitTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResultJSONString)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.EarliestLedgerVersion != 0 {
		n += 1 + sovTransaction(uint64(m.EarliestLedgerVersion))
	}
	return n
}

func (m *ResponseWaitValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerVersion != 0 {
		n += 1 + sovTransaction(uint64(m.LedgerVersion))
	}
	return n
}

func (m *RequestGetTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.MinLedgerVersion != 0 {
		n += 1 + sovTransaction(uint64(m.MinLedgerVersion))
	}
	return n
}

func (m *ResponseGetTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResultJSONString)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Instructions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Instructions{`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`MaxFee:` + fmt.Sprintf("%v", this.MaxFee) + `,`,
		`MaxLedgerVersion:` + fmt.Sprintf("%v", this.MaxLedgerVersion) + `,`,
		`MaxLedgerVersionOffset:` + fmt.Sprintf("%v", this.MaxLedgerVersionOffset) + `,`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`SignersCount:` + fmt.Sprintf("%v", this.SignersCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPrepareTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPrepareTransaction{`,
		`TxType:` + fmt.Sprintf("%v", this.TxType) + `,`,
		`SenderAccount:` + fmt.Sprintf("%v", this.SenderAccount) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`ReceiverAccount:` + fmt.Sprintf("%v", this.ReceiverAccount) + `,`,
		`Instructions:` + strings.Replace(this.Instructions.String(), "Instructions", "Instructions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponsePrepareTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponsePrepareTransaction{`,
		`TxJSON:` + fmt.Sprintf("%v", this.TxJSON) + `,`,
		`Instructions:` + strings.Replace(this.Instructions.String(), "Instructions", "Instructions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignTransaction{`,
		`TxJSON:` + fmt.Sprintf("%v", this.TxJSON) + `,`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSignTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSignTransaction{`,
		`TxID:` + fmt.Sprintf("%v", this.TxID) + `,`,
		`TxBlob:` + fmt.Sprintf("%v", this.TxBlob) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubmitTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSubmitTransaction{`,
		`TxBlob:` + fmt.Sprintf("%v", this.TxBlob) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSubmitTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSubmitTransaction{`,
		`ResultJSONString:` + fmt.Sprintf("%v", this.ResultJSONString) + `,`,
		`EarliestLedgerVersion:` + fmt.Sprintf("%v", this.EarliestLedgerVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseWaitValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseWaitValidation{`,
		`LedgerVersion:` + fmt.Sprintf("%v", this.LedgerVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetTransaction{`,
		`TxID:` + fmt.Sprintf("%v", this.TxID) + `,`,
		`MinLedgerVersion:` + fmt.Sprintf("%v", this.MinLedgerVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetTransaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetTransaction{`,
		`ResultJSONString:` + fmt.Sprintf("%v", this.ResultJSONString) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransaction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Instructions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instructions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instructions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLedgerVersion", wireType)
			}
			m.MaxLedgerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLedgerVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLedgerVersionOffset", wireType)
			}
			m.MaxLedgerVersionOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLedgerVersionOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersCount", wireType)
			}
			m.SignersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPrepareTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPrepareTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPrepareTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= EnumTransactionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instructions == nil {
				m.Instructions = &Instructions{}
			}
			if err := m.Instructions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponsePrepareTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponsePrepareTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponsePrepareTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instructions == nil {
				m.Instructions = &Instructions{}
			}
			if err := m.Instructions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSignTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSignTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSignTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBlob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBlob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubmitTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubmitTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubmitTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBlob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBlob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSubmitTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSubmitTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSubmitTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultJSONString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultJSONString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarliestLedgerVersion", wireType)
			}
			m.EarliestLedgerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EarliestLedgerVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseWaitValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseWaitValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseWaitValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerVersion", wireType)
			}
			m.LedgerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LedgerVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLedgerVersion", wireType)
			}
			m.MinLedgerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLedgerVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultJSONString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultJSONString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransaction = fmt.Errorf("proto: unexpected end of group")
)
